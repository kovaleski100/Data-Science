teste<read.csv("http://dl.dropbox.com/u/6511995/testeR.csv", header=T, row.names=1, sep=";")
teste<read.csv("http://dl.dropbox.com/u/6511995/testeR.csv", header=T, row.names=1, sep=";")
teste<read.csv("http://dl.dropbox.com/u/6511995/testeR.csv", header=T, row.names=1, sep=";")
FreqLocais[1,1]=1
Frequencias
FreqLocais
#FreqLocais[1,1]=1
clocks[1,1]=1
FreqLocais[1,1]=1
SomaPesos=0
PesosLocais = matrix(0, T, T) # Calcula os pesos locais
SomaDosPesosLocais=rep(0, T) # Para o calculo de frequencias Locais e Relógios
FreqLocais=matrix(0,T,T) # Frequencias Locais
SomaPesos=0
Valores=rep(Inf, T)
delta = 1 # Peso a ser somado no caso de bifurcaÃ§Ã£o
alive = matrix(0, T, T) # Variável de controle de sobrevivência
clocks = matrix(Inf, T, T) # RelÃ³gio com os parÃ¢metros exponenciais
winner = rep(0, T) # Determina o vencedor no tempo 1<= t<= T
alive[1,1]=1
PesosLocais[1,1]=1
winner[1]=1
FreqLocais[1,1]=1
clocks[1,1]=1
SomaDosPesosLocais[1]=1
for (t in 2:T)
{
SomaPesos=0
for (j in 1:t)
{
if(winner[t-1]==j)
{
PesosLocais[j,t]=delta+PesosLocais[j,t-1]
SomaPesos=SomaPesos+PesosLocais[j,t]
}
else if(winner[t-1]==j-1)
{
PesosLocais[j,t]=delta+PesosLocais[j-1,t-1]
SomaPesos=SomaPesos+PesosLocais[j,t]
}
else
{
if(winner[t-1]>=j)
{
if(PesosLocais[j,t-1]>0)
{
alive[j,t] = sample(c(0,1), size = 1, prob = c(0.1,0.9), replace = TRUE)
}
PesosLocais[j,t]=PesosLocais[j,t-1]-delta*(alive[j,t]==0)
SomaPesos=SomaPesos+PesosLocais[j,t]
}
else
{
if(PesosLocais[j-1,t-1]>0)
{
alive[j,t] = sample(c(0,1), size = 1, prob = c(0.1,0.9), replace = TRUE)
}
PesosLocais[j,t]=PesosLocais[j-1,t-1]-delta*(alive[j,t]==0)
SomaPesos=SomaPesos+PesosLocais[j,t]
}
}
}
SomaDosPesosLocais[t]=SomaPesos
for (j in 1:t)
{
FreqLocais[j,t]=PesosLocais[j,t]/SomaDosPesosLocais[t]
}
#(Passo 3)
# "Ligamos" os relÃ³gios exp. para os vivos, pois somente
for (j in 1:t)
{
clocks[j,t] = rexp(1, rate = PesosLocais[j,t])
}
# Determinamos agora o relÃ³gio vencedor para a prÃ³xima linhagem (entre os vivos)
winner[t] = which.min(clocks[,t])
}
plot(1:T, 1:T, type = 'n', axes = FALSE, ann = FALSE)
for (t in 2:T)
{
for (j in 1:t)
{
#Mudei Alive por ContaDeath
if (PesosLocais[j,t]>0)
{
if (j <= winner[t-1])
{
segments(x0 = t, x1 = t-1, y0 = j, y1 = j)
}
else
{
segments(x0 = t, x1 = t-1, y0 = j, y1 = j-1)
}
}
#else
#{
#  if (j <= winner[t-1]) {
#    segments(x0 = t, x1 = t-1, y0 = j, y1 = j, lty = 'dotted', col = rgb(0,0,0,.01))
#  } else {
#    segments(x0 = t, x1 = t-1, y0 = j, y1 = j-1, lty = 'dotted', col = rgb(0,0,0,.01))
#  }
#}
}
}
#for (t in 1:T)
#for (t in 1:T)
#{
#for (t in 1:T)
#{
#  weights = alive[1:t,t]*FreqLocais[1:t,t]/max(FreqLocais[1:t,t])
#for (t in 1:T)
#{
#  weights = alive[1:t,t]*FreqLocais[1:t,t]/max(FreqLocais[1:t,t])
#  points(rep(t,t), 1:t, pch=19, col=rgb(0,.4,.7,alpha = 0.9*weights), cex = 1.5)
or (t in 1:T)
#{
#  weights = alive[1:t,t]*FreqLocais[1:t,t]/max(FreqLocais[1:t,t])
#  points(rep(t,t), 1:t, pch=19, col=rgb(0,.4,.7,alpha = 0.9*weights), cex = 1.5)
#  points(t, winner[t], pch=21, bg=rgb(0,0,0,0), cex = 1.5, lwd=3)
or (t in 1:T)
#{
#  weights = alive[1:t,t]*FreqLocais[1:t,t]/max(FreqLocais[1:t,t])
#  points(rep(t,t), 1:t, pch=19, col=rgb(0,.4,.7,alpha = 0.9*weights), cex = 1.5)
#  points(t, winner[t], pch=21, bg=rgb(0,0,0,0), cex = 1.5, lwd=3)
# for (s in 1:t){
or (t in 1:T)
#{
#  weights = alive[1:t,t]*FreqLocais[1:t,t]/max(FreqLocais[1:t,t])
#  points(rep(t,t), 1:t, pch=19, col=rgb(0,.4,.7,alpha = 0.9*weights), cex = 1.5)
#  points(t, winner[t], pch=21, bg=rgb(0,0,0,0), cex = 1.5, lwd=3)
# for (s in 1:t){
#   if (which.dead[1:t,s]>.99) points(t, s, pch=21, bg='red', cex = 1.5)
#for (t in 1:T)
#{
#  weights = alive[1:t,t]*FreqLocais[1:t,t]/max(FreqLocais[1:t,t])
#  points(rep(t,t), 1:t, pch=19, col=rgb(0,.4,.7,alpha = 0.9*weights), cex = 1.5)
#  points(t, winner[t], pch=21, bg=rgb(0,0,0,0), cex = 1.5, lwd=3)
# for (s in 1:t){
#   if (which.dead[1:t,s]>.99) points(t, s, pch=21, bg='red', cex = 1.5)
# }
#for (t in 1:T)
#{
#  weights = alive[1:t,t]*FreqLocais[1:t,t]/max(FreqLocais[1:t,t])
#  points(rep(t,t), 1:t, pch=19, col=rgb(0,.4,.7,alpha = 0.9*weights), cex = 1.5)
#  points(t, winner[t], pch=21, bg=rgb(0,0,0,0), cex = 1.5, lwd=3)
# for (s in 1:t){
#   if (which.dead[1:t,s]>.99) points(t, s, pch=21, bg='red', cex = 1.5)
# }
#}
#for (t in 1:T)
#{
#  weights = alive[1:t,t]*FreqLocais[1:t,t]/max(FreqLocais[1:t,t])
#  points(rep(t,t), 1:t, pch=19, col=rgb(0,.4,.7,alpha = 0.9*weights), cex = 1.5)
#  points(t, winner[t], pch=21, bg=rgb(0,0,0,0), cex = 1.5, lwd=3)
# for (s in 1:t){
#   if (which.dead[1:t,s]>.99) points(t, s, pch=21, bg='red', cex = 1.5)
# }
#}
#for (t in 1:T)
#{
#  weights = alive[1:t,t]*FreqLocais[1:t,t]/max(FreqLocais[1:t,t])
#  points(rep(t,t), 1:t, pch=19, col=rgb(0,.4,.7,alpha = 0.9*weights), cex = 1.5)
#  points(t, winner[t], pch=21, bg=rgb(0,0,0,0), cex = 1.5, lwd=3)
# for (s in 1:t){
#   if (which.dead[1:t,s]>.99) points(t, s, pch=21, bg='red', cex = 1.5)
# }
#}
for (t in 2:T)
{
SomaPesos=0
for (j in 1:t)
{
if(winner[t-1]==j)
{
PesosLocais[j,t]=delta+PesosLocais[j,t-1]
SomaPesos=SomaPesos+PesosLocais[j,t]
}
else if(winner[t-1]==j-1)
{
PesosLocais[j,t]=delta+PesosLocais[j-1,t-1]
SomaPesos=SomaPesos+PesosLocais[j,t]
}
else
{
if(winner[t-1]>=j)
{
if(PesosLocais[j,t-1]>0)
{
alive[j,t] = sample(c(0,1), size = 1, prob = c(0.1,0.9), replace = TRUE)
}
PesosLocais[j,t]=PesosLocais[j,t-1]-delta*(alive[j,t]==0)
SomaPesos=SomaPesos+PesosLocais[j,t]
}
else
{
if(PesosLocais[j-1,t-1]>0)
{
alive[j,t] = sample(c(0,1), size = 1, prob = c(0.1,0.9), replace = TRUE)
}
PesosLocais[j,t]=PesosLocais[j-1,t-1]-delta*(alive[j,t]==0)
SomaPesos=SomaPesos+PesosLocais[j,t]
}
}
}
SomaDosPesosLocais[t]=SomaPesos
for (j in 1:t)
{
FreqLocais[j,t]=PesosLocais[j,t]/SomaDosPesosLocais[t]
}
#(Passo 3)
# "Ligamos" os relÃ³gios exp. para os vivos, pois somente
for (j in 1:t)
{
clocks[j,t] = rexp(1, rate = PesosLocais[j,t])
}
# Determinamos agora o relÃ³gio vencedor para a prÃ³xima linhagem (entre os vivos)
winner[t] = which.min(clocks[,t])
}
{
if(winner[t-1]==j)
{
PesosLocais[j,t]=delta+PesosLocais[j,t-1]
SomaPesos=SomaPesos+PesosLocais[j,t]
}
else if(winner[t-1]==j-1)
{
PesosLocais[j,t]=delta+PesosLocais[j-1,t-1]
SomaPesos=SomaPesos+PesosLocais[j,t]
}
else
{
if(winner[t-1]>=j)
{
if(PesosLocais[j,t-1]>0)
{
alive[j,t] = sample(c(0,1), size = 1, prob = c(0.1,0.9), replace = TRUE)
}
PesosLocais[j,t]=PesosLocais[j,t-1]-delta*(alive[j,t]==0)
SomaPesos=SomaPesos+PesosLocais[j,t]
}
else
{
if(PesosLocais[j-1,t-1]>0)
{
alive[j,t] = sample(c(0,1), size = 1, prob = c(0.1,0.9), replace = TRUE)
}
PesosLocais[j,t]=PesosLocais[j-1,t-1]-delta*(alive[j,t]==0)
SomaPesos=SomaPesos+PesosLocais[j,t]
}
}
}
SomaDosPesosLocais[t]=SomaPesos
for (j in 1:t)
{
FreqLocais[j,t]=PesosLocais[j,t]/SomaDosPesosLocais[t]
}
for (t in 2:T)
{
SomaPesos=0
for (j in 1:t)
{
if(winner[t-1]==j)
{
PesosLocais[j,t]=delta+PesosLocais[j,t-1]
SomaPesos=SomaPesos+PesosLocais[j,t]
}
else if(winner[t-1]==j-1)
{
PesosLocais[j,t]=delta+PesosLocais[j-1,t-1]
SomaPesos=SomaPesos+PesosLocais[j,t]
}
else
{
if(winner[t-1]>=j)
{
if(PesosLocais[j,t-1]>0)
{
alive[j,t] = sample(c(0,1), size = 1, prob = c(0.1,0.9), replace = TRUE)
}
PesosLocais[j,t]=PesosLocais[j,t-1]-delta*(alive[j,t]==0)
SomaPesos=SomaPesos+PesosLocais[j,t]
}
else
{
if(PesosLocais[j-1,t-1]>0)
{
alive[j,t] = sample(c(0,1), size = 1, prob = c(0.1,0.9), replace = TRUE)
}
PesosLocais[j,t]=PesosLocais[j-1,t-1]-delta*(alive[j,t]==0)
SomaPesos=SomaPesos+PesosLocais[j,t]
}
}
}
SomaDosPesosLocais[t]=SomaPesos
for (j in 1:t)
{
FreqLocais[j,t]=PesosLocais[j,t]/SomaDosPesosLocais[t]
}
#(Passo 3)
# "Ligamos" os relÃ³gios exp. para os vivos, pois somente
for (j in 1:t)
{
clocks[j,t] = rexp(1, rate = PesosLocais[j,t])
}
# Determinamos agora o relÃ³gio vencedor para a prÃ³xima linhagem (entre os vivos)
winner[t] = which.min(clocks[,t])
}
savehistory("C:/Users/mat-v/Desktop/rscriptSamuel.r")
teste<read.csv("http://dl.dropbox.com/u/6511995/testeR.csv", header=T, row.names=1, sep=";")
FreqLocais[1,1]=1
Frequencias
FreqLocais
getwd()
setwd("C:\Users\mat-v\Desktop\git\Data Science\data tratment")
getwd()
setwd(filePath)
setwd(pathName)
pathName = "C:/Users/mat-v/Desktop/git/Data Science/data tratment"
pathName = "C:/Users/mat-v/Desktop/git/Data Science/data tratment"
setwd(pathName)
data = read.csv("tempo.csv")
summary(data)
data$Aparencia
data
summary(data$Aparecia)
summary(data$Aparencia.Temperatura.Umidade.Vento.Jogar)
summary(data$Aparencia)
summary(data$Temperatura)
data = read.csv("tempo.csv", sep = ";")
summary(data$Aparencia)
summary(data$Temperatura)
summary(data$Aparencia)
data = read.csv("tempo.csv", sep = ";", na.strings = "", stringsAsFactors = T)
summary(data$Aparencia)
clear
summary(data$Aparencia)
summary(data$Temperatura)
data = read.csv("tempo.csv", sep = ";", na.strings = "", stringsAsFactors = T)
data
data = read.csv("tempo.csv", sep = ";", na.strings = "", stringsAsFactors = T)
data
count = count(data$Aparencia)
plot(ct)
ct = count(data$Aparencia)
ct = table(data$Aparencia)
plot(ct)
barplot(ct)
data
data$Temperatura
summary(data$Temperatura)
summary(data)
ct = table(data$Vento)
barplot(ct)
ct = table(data$Jogar)
barplot(ct)
#dados numericos
summary(data$Temperatura)
boxplot(data$Temperatura)
boxplot(data$Temperatura, outline = F)
sumary(data$Umidade)
summary(data$Umidade)
boxplot(data$Umidade)
boxplot(data$Umidade, outline = F)
data[complete.cases(data)]
data[complete.cases(data),]
data[!complete.cases(data),]
data[data$Aparencia == "menos",]$Aparencia = "sol"
summary(data$Aparencia)
data$Aparencia = factor(data$Aparencia)
summary(data$Aparencia)
#correção temperatura
data$Temperatura
#correção temperatura
table(data$Temperatura)
#correção temperatura
summary(data$Temperatura)
data[data$Temperatura < -130 | data$Temperatura > 130,]$Temperatura
med = median(data$Temperatura)
data[data$Temperatura < -130 | data$Temperatura > 130,]$Temperatura = med
summary(data$Temperatura)
boxplot(data$Temperatura)
#correção umidade
summary(data$Umidade)
data[data$Umidade<0 | data$Umidade> 100,]$Umidade
med = median(data$Umidade, na.rm = T)
data[is.na(data$Umidade),]$Umidade = med
data[data$Umidade<0 | data$Umidade> 100,]$Umidade = med
summary(data$Umidade)
summary(data$Vento)
data[is.na(data$Vento)] = "FALSO"
data[is.na(data$Vento),]$Vento = "FALSO"
summary(data$Vento)
#correção jogar
summary(data$Jogar)
